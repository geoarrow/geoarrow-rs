from __future__ import annotations

from typing import Protocol, Tuple

class _ArrowArrayExportable(Protocol):
    """A GeoArrow array from a local or remote (e.g. geoarrow.c) source."""
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class PointArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class LineStringArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class PolygonArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiPointArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiLineStringArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiPolygonArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MixedGeometryArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class GeometryCollectionArray:
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class WKBArray: ...
class BooleanArray: ...
class Float16Array: ...
class Float32Array: ...
class Float64Array: ...
class Int16Array: ...
class Int32Array: ...
class Int64Array: ...
class Int8Array: ...
class LargeStringArray: ...
class StringArray: ...
class UInt16Array: ...
class UInt32Array: ...
class UInt64Array: ...
class UInt8Array: ...

def area(input: _ArrowArrayExportable) -> Float64Array: ...
def signed_area(input: _ArrowArrayExportable) -> Float64Array: ...
def center(input: _ArrowArrayExportable) -> PointArray: ...
def centroid(input: _ArrowArrayExportable) -> PointArray: ...
def convex_hull(input: _ArrowArrayExportable) -> PolygonArray: ...
def from_wkb(
    input: _ArrowArrayExportable,
) -> (
    PointArray
    | LineStringArray
    | PolygonArray
    | MultiPointArray
    | MultiLineStringArray
    | MultiPolygonArray
    | MixedGeometryArray
    | GeometryCollectionArray
): ...
def to_wkb(input: _ArrowArrayExportable) -> WKBArray: ...
