from __future__ import annotations

from typing import Protocol, Tuple

import numpy as np
from numpy.typing import NDArray

class _ArrowArrayExportable(Protocol):
    """A GeoArrow array from a local or remote (e.g. geoarrow.c) source."""
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class PointArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class LineStringArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class PolygonArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiPointArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiLineStringArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MultiPolygonArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> PolygonArray: ...

class MixedGeometryArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class GeometryCollectionArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def area(self) -> Float64Array: ...
    def center(self) -> PointArray: ...
    def centroid(self) -> PointArray: ...
    def convex_hull(self) -> PolygonArray: ...

class WKBArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class BooleanArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class Float16Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class Float32Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.float32]: ...

class Float64Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.float64]: ...

class Int16Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.int16]: ...

class Int32Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.int32]: ...

class Int64Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.int64]: ...

class Int8Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.int8]: ...

class LargeStringArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class StringArray:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...

class UInt16Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.uint16]: ...

class UInt32Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.uint32]: ...

class UInt64Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.uint64]: ...

class UInt8Array:
    def __arrow_c_array__(
        self, requested_schema: object | None = None
    ) -> Tuple[object, object]: ...
    def to_numpy(self) -> NDArray[np.uint8]: ...

class ChunkedPointArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedLineStringArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedPolygonArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedMultiPointArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedMultiLineStringArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedMultiPolygonArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    # def chaikin_smoothing(self, n_iterations: int) -> Self: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedMixedGeometryArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedGeometryCollectionArray:
    def area(self) -> ChunkedFloat64Array: ...
    def center(self) -> ChunkedPointArray: ...
    def centroid(self) -> ChunkedPointArray: ...
    def convex_hull(self) -> ChunkedPolygonArray: ...

class ChunkedWKBArray: ...
class ChunkedBooleanArray: ...
class ChunkedFloat16Array: ...
class ChunkedFloat32Array: ...
class ChunkedFloat64Array: ...
class ChunkedInt16Array: ...
class ChunkedInt32Array: ...
class ChunkedInt64Array: ...
class ChunkedInt8Array: ...
class ChunkedLargeStringArray: ...
class ChunkedStringArray: ...
class ChunkedUInt16Array: ...
class ChunkedUInt32Array: ...
class ChunkedUInt64Array: ...
class ChunkedUInt8Array: ...

def area(input: _ArrowArrayExportable) -> Float64Array: ...
def signed_area(input: _ArrowArrayExportable) -> Float64Array: ...
def center(input: _ArrowArrayExportable) -> PointArray: ...
def centroid(input: _ArrowArrayExportable) -> PointArray: ...
def convex_hull(input: _ArrowArrayExportable) -> PolygonArray: ...
def from_wkb(
    input: _ArrowArrayExportable,
) -> (
    PointArray
    | LineStringArray
    | PolygonArray
    | MultiPointArray
    | MultiLineStringArray
    | MultiPolygonArray
    | MixedGeometryArray
    | GeometryCollectionArray
): ...
def to_wkb(input: _ArrowArrayExportable) -> WKBArray: ...
