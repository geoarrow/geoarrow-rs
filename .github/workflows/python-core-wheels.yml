name: Python (Core) Wheels

on:
  push:
    # tags:
    #   - "python-core-v*"

jobs:
  linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python/core
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: x64

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -m python/Cargo.toml
          # working-directory: python/core

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install geoarrow-rust-core --no-index --find-links dist --force-reinstall
          python -c "import geoarrow.rust.core"

      # Have to set path from root
      # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: python/core/dist/*.whl

  linux-cross:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python/core
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -m python/Cargo.toml
          # working-directory: python/core

      - uses: uraimo/run-on-arch-action@v2.5.1
        if: matrix.target != 'ppc64'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip install geoarrow-rust-core --no-index --find-links dist --force-reinstall
            python -c "import geoarrow.rust.core"

      # Have to set path from root
      # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: python/core/dist/*.whl

  macos:
    runs-on: macos-latest
    # defaults:
    #   run:
    #     working-directory: python/core
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: x64

      - uses: dtolnay/rust-toolchain@stable

      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist -m python/Cargo.toml
          working-directory: python/core

      - name: Install built wheel - x86_64
        run: |
          pip install geoarrow-rust-core --no-index --find-links dist --force-reinstall
          python -c "import geoarrow.rust.core"

      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist -m python/Cargo.toml
          working-directory: python/core

      - name: Install built wheel - universal2
        run: |
          pip install geoarrow-rust-core --no-index --find-links dist --force-reinstall
          python -c "import geoarrow.rust.core"

      # Have to set path from root
      # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: python/core/dist/*.whl

  # build-wheels-mac:
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: python/core

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: "recursive"

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Set up Rust targets
  #       run: rustup target add aarch64-apple-darwin

  #     - uses: Swatinem/rust-cache@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.8"

  #     - name: Install Python dependencies
  #       run: |
  #         python -V
  #         pip install maturin

  #     # Build wheels for both x86 and aarch
  #     - name: Build
  #       run: |
  #         maturin build --release --strip -o wheels
  #         maturin build --release --target aarch64-apple-darwin --strip -o wheels

  #     - name: List wheels
  #       run: find ./wheels

  #     # Have to set path from root
  #     # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: python/core/wheels/*.whl

  # build-wheel-windows:
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       working-directory: python/core

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: "windows-2019"
  #           arch: "auto64"
  #           triplet: "x64-windows"
  #           vcpkg_cache: "c:\\vcpkg\\installed"
  #           vcpkg_logs: "c:\\vcpkg\\buildtrees\\**\\*.log"

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: "recursive"

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable

  #     - uses: Swatinem/rust-cache@v2

  #     - name: Setup Conda
  #       uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         python-version: "3.8"
  #         miniforge-version: latest
  #         miniforge-variant: Mambaforge
  #         use-mamba: true

  #     - name: Install Python dependencies
  #       shell: bash
  #       run: |
  #         python -V
  #         python -m pip install maturin
  #         python -m pip install delvewheel

  #     - name: Build
  #       shell: bash
  #       run: |
  #         maturin build --release --strip -o wheels

  #     - name: List wheels
  #       shell: bash
  #       run: find ./wheels

  #     # Have to set path from root
  #     # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: python/core/wheels/*.whl

  # build_sdist:
  #   name: Build source distribution
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: python/core

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: "recursive"

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: "3.8"

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Build sdist
  #       run: |
  #         pip install -U build
  #         python -m build --sdist

  #     # Have to set path from root
  #     # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: python/core/dist/*.tar.gz

  # upload_pypi:
  #   needs:
  #     [
  #       build-wheel-manylinux2014,
  #       build-wheels-mac,
  #       build-wheel-windows,
  #       build_sdist,
  #     ]
  #   runs-on: ubuntu-latest
  #   # Make sure we only run this on new tags/release
  #   if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_PASSWORD }}
  #         # To test: repository_url: https://test.pypi.org/legacy/
