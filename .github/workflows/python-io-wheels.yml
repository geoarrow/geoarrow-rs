name: Python Wheels (IO)

on:
  push:
    tags:
      - "py-v*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: x64

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: manylinux_2_28
          args: --release --out dist -m python/geoarrow-io/Cargo.toml
          before-script-linux: |
            yum update -y
            yum install openssl openssl-devel perl-IPC-Cmd -y

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install geoarrow-rust-io --find-links dist --force-reinstall
          python -c "import geoarrow.rust.io"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  # linux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [aarch64, armv7, s390x, ppc64le, ppc64]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: auto
  #         args: --release --out dist -m python/geoarrow-io/Cargo.toml

  #     # This is currently failing with
  #     # python: command not found

  #     # - uses: uraimo/run-on-arch-action@v2.5.1
  #     #   if: matrix.target == 'aarch64'
  #     #   name: Install built wheel
  #     #   with:
  #     #     arch: ${{ matrix.target }}
  #     #     distro: ubuntu20.04
  #     #     githubToken: ${{ github.token }}
  #     #     install: |
  #     #       apt-get update
  #     #       apt-get install -y --no-install-recommends python3 python3-pip
  #     #       pip3 install -U pip
  #     #     run: |
  #     #       pip install geoarrow-rust-io --find-links dist --force-reinstall
  #     #       python -c "import geoarrow.rust.io"

  #     # Have to set path from root
  #     # https://github.com/actions/upload-artifact/issues/232#issuecomment-964235360
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist/*.whl

  macos:
    name: Build ${{ matrix.platform.target }} wheels on ${{ matrix.platform.runner }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-12
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - uses: dtolnay/rust-toolchain@stable

      - name: Build wheels - ${{ matrix.platform.target }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -m python/geoarrow-io/Cargo.toml
          sccache: "true"

      - name: Install built wheel - ${{ matrix.platform.target }}
        run: |
          pip install geoarrow-rust-io --find-links dist --force-reinstall
          python -c "import geoarrow.rust.io"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: ${{ matrix.target }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -m python/geoarrow-io/Cargo.toml

      - name: Install built wheel
        run: |
          pip install geoarrow-rust-io --find-links dist --force-reinstall
          python -c "import geoarrow.rust.io"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  # NOTE: musllinux builds are commented out because importing them failed with:
  # ImportError: Error loading shared library libgcc_s-60abea67.so.1: No such file or directory

  # musllinux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-musl
  #         - i686-unknown-linux-musl
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #         architecture: x64

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m python/geoarrow-io/Cargo.toml

  #     - name: Install built wheel
  #       if: matrix.target == 'x86_64-unknown-linux-musl'
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           apk add py3-pip
  #           pip3 install -U pip
  #           pip3 install geoarrow-rust-io --find-links /io/dist/ --force-reinstall
  #           python3 -c "import geoarrow.rust.io"

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # musllinux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       platform:
  #         - target: aarch64-unknown-linux-musl
  #           arch: aarch64
  #         - target: armv7-unknown-linux-musleabihf
  #           arch: armv7

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m python/geoarrow-io/Cargo.toml

  #     - uses: uraimo/run-on-arch-action@v2.5.1
  #       name: Install built wheel
  #       with:
  #         arch: ${{ matrix.platform.arch }}
  #         distro: alpine_latest
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apk add py3-pip
  #           pip3 install -U pip
  #         run: |
  #           pip3 install geoarrow-rust-io --find-links dist/ --force-reinstall
  #           python3 -c "import geoarrow.rust.io"

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [macos, windows, linux]
    permissions:
      # Used to upload release artifacts
      contents: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
