name: Rust

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test-all-features:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Install Pixi
        run: |
          curl -fsSL https://pixi.sh/install.sh | bash
          echo "$HOME/.pixi/bin" >> $GITHUB_PATH
          echo "GDAL_HOME=$(pwd)/build/.pixi/envs/default" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          echo "GEOS_LIB_DIR=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          # TODO: infer from toml file/lockfile
          echo "GEOS_VERSION=3.12.1" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH=$(pwd)/build/.pixi/envs/default/lib/pkgconfig" >> "$GITHUB_ENV"
      - name: Install build requirements
        run: |
          cd build
          pixi install
      - name: Fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy --all-features --tests -- -D warnings
      - name: Check
        run: cargo check --all-features --features gdal/bindgen
      - name: Test
        run: cargo test --all-features

  check-features:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        args:
          - ""
          - "-F csv"
          - "-F flatgeobuf"
          - "-F flatgeobuf_async"
          - "-F geozero"
          - "-F ipc_compression"
          - "-F parquet"
          - "-F parquet_async"
          - "-F parquet_compression"
          - "-F polylabel"
          - "-F postgis"
          - "-F rayon"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Test
        run: cargo check ${{ matrix.args }}

  check-features-with-external-dependencies:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        args:
          - "-F gdal -F gdal/bindgen"
          - "-F geos"
          - "-F proj"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Pixi
        run: |
          curl -fsSL https://pixi.sh/install.sh | bash
          echo "$HOME/.pixi/bin" >> $GITHUB_PATH
          echo "GDAL_HOME=$(pwd)/build/.pixi/envs/default" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          echo "GEOS_LIB_DIR=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          # TODO: infer from toml file/lockfile
          echo "GEOS_VERSION=3.12.1" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH=$(pwd)/build/.pixi/envs/default/lib/pkgconfig" >> "$GITHUB_ENV"
      - name: Install build requirements
        run: |
          cd build
          pixi install
      - name: Test
        run: cargo check ${{ matrix.args }}

  build-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Pixi
        run: |
          curl -fsSL https://pixi.sh/install.sh | bash
          echo "$HOME/.pixi/bin" >> $GITHUB_PATH
          echo "GDAL_HOME=$(pwd)/build/.pixi/envs/default" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          echo "GEOS_LIB_DIR=$(pwd)/build/.pixi/envs/default/lib" >> "$GITHUB_ENV"
          # TODO: infer from toml file/lockfile
          echo "GEOS_VERSION=3.12.1" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH=$(pwd)/build/.pixi/envs/default/lib/pkgconfig" >> "$GITHUB_ENV"
      - name: Install build requirements
        run: |
          cd build
          pixi install
      - name: Build benchmarks with no features
        run: cargo bench --no-run
      - name: Build benchmarks with all features
        run: cargo bench --no-run --all-features
